function(zfp_add_test dims type bits)
  set(serial_test_name testZfpSerial${dims}d${type})
  add_executable(${serial_test_name} ${serial_test_name}.c)
  target_link_libraries(${serial_test_name}
    cmocka zfp hash${bits}Lib genSmoothRandNumsLib)
  if(HAVE_LIBM_MATH)
    target_link_libraries(${serial_test_name} m)
  endif()
  add_test(NAME ${serial_test_name} COMMAND ${serial_test_name})

  if(ZFP_WITH_OPENMP)
    set(omp_test_name testZfpOmp${dims}d${type})
    add_executable(${omp_test_name} ${omp_test_name}.c)
    target_compile_options(${omp_test_name} PRIVATE ${OpenMP_C_FLAGS})
    target_link_libraries(${omp_test_name}
      cmocka zfp hash${bits}Lib genSmoothRandNumsLib
      ${OpenMP_C_LIBRARIES})
    if(HAVE_LIBM_MATH)
      target_link_libraries(${omp_test_name} m)
    endif()
    add_test(NAME ${omp_test_name} COMMAND ${omp_test_name})
    set_property(TEST ${omp_test_name} PROPERTY RUN_SERIAL TRUE)
  endif()

  if(ZFP_WITH_CUDA AND (${dims} LESS 4))
    add_definitions(-DZFP_WITH_CUDA)

    set(cuda_test_name testZfpCuda${dims}d${type})
    add_executable(${cuda_test_name} ${cuda_test_name}.c)
    target_link_libraries(${cuda_test_name}
      cmocka zfp hash${bits}Lib genSmoothRandNumsLib)
    if(HAVE_LIBM_MATH)
      target_link_libraries(${cuda_test_name} m)
    endif()
    add_test(NAME ${cuda_test_name} COMMAND ${cuda_test_name})
    set_property(TEST ${cuda_test_name} PROPERTY RUN_SERIAL TRUE)
  endif()
endfunction()

zfp_add_test(1 Int32 32)
zfp_add_test(1 Int64 64)
zfp_add_test(2 Int32 32)
zfp_add_test(2 Int64 64)
zfp_add_test(3 Int32 32)
zfp_add_test(3 Int64 64)
zfp_add_test(4 Int32 32)
zfp_add_test(4 Int64 64)

zfp_add_test(1 Float 32)
zfp_add_test(1 Double 64)
zfp_add_test(2 Float 32)
zfp_add_test(2 Double 64)
zfp_add_test(3 Float 32)
zfp_add_test(3 Double 64)
zfp_add_test(4 Float 32)
zfp_add_test(4 Double 64)
